snippet boiler
	#!/usr/bin/env python
	# -*- coding: utf-8 -*-
	"""${4:[application description here]}"""

	__appname__ = "${1:[application name here]}"
	__author__  = "Stephan Sokolow (deitarion/SSokolow)"
	__version__ = "${2:0.0pre0}"
	__license__ = "${3:GNU GPL 2.0 or later}"

	import logging
	log = logging.getLogger(__name__)

	${7:# -- Code Here --}

	if __name__ == '__main__':
		from optparse import OptionParser
		parser = OptionParser(version="%%prog v%s" % __version__,
				usage="%prog ${5:[options] <argument> ...}",
				description=__doc__.replace('\r\n','\n').split('\n--snip--\n')[0])
		parser.add_option('-v', '--verbose', action="count", dest="verbose",
			default=2, help="Increase the verbosity. Can be used twice for extra effect.")
		parser.add_option('-q', '--quiet', action="count", dest="quiet",
			default=0, help="Decrease the verbosity. Can be used twice for extra effect.")
		#Reminder: %default can be used in help strings.

		# Allow pre-formatted descriptions
		parser.formatter.format_description = lambda description: description

		opts, args  = parser.parse_args()

		# Set up clean logging to stderr
		log_levels = [logging.CRITICAL, logging.ERROR, logging.WARNING,
					  logging.INFO, logging.DEBUG]
		opts.verbose = min(opts.verbose - opts.quiet, len(log_levels) - 1)
		opts.verbose = max(opts.verbose, 0)
		logging.basicConfig(level=log_levels[opts.verbose],
							format='%(levelname)s: %(message)s')

		${6}

snippet logging
	import logging
	log = logging.getLogger(__name__)

	# Set up debug logging to file
	logging.basicConfig(level=logging.DEBUG,
						format='%(asctime)s %(levelname)s %(message)s',
						filename='debug.log',
						filemode='w')

	# Also send INFO and up to console
	console = logging.StreamHandler()
	console.setLevel(logging.INFO)
	formatter = logging.Formatter('%(levelname)-8s: %(message)s')
	console.setFormatter(formatter)
	logging.getLogger('').addHandler(console)

snippet super
	super(${1:ClassName}, self).__init__(${2})

snippet useragent
	import urllib2

	opener = urllib2.build_opener()
	opener.addheaders = [('User-Agent', '%s/%s +${1:Project URL Here}' % (__appname__, __version__))]
	urllib2.install_opener(opener)

snippet xdg
	import os

	# See http://standards.freedesktop.org/basedir-spec/basedir-spec-latest.html
	XDG_DATA_DIR = os.environ.get('XDG_DATA_HOME', os.path.expanduser('~/.local/share'))
	XDG_CONFIG_DIR = os.environ.get('XDG_CONFIG_HOME', os.path.expanduser('~/.config'))

