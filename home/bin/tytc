#!/usr/bin/env python2
# -*- coding: utf-8 -*-
"""Helper to move watched TYT clips to storage"""

from __future__ import (absolute_import, division, print_function,
                        with_statement, unicode_literals)

import glob, hashlib, os, shutil

TARGET_DIR = os.path.expanduser("~/incoming/Videos/Young Turks")

def hash_file(handle):
    """Generate an SHA1 hash of a file in a memory-efficient manner.

    (Used to decide how to handle "target path already exists")
    """
    if isinstance(handle, basestring):
        with open(handle, 'rb') as fobj:
            return hash_file(fobj)

    # Chunked digest generation (conserve memory)
    fhash, chunk_size = hashlib.sha1(), 65535
    for block in iter(lambda: handle.read(chunk_size), b''):
        fhash.update(block)

    return fhash.hexdigest()

def main():
    # If we're running on Python 2, take responsibility for preventing
    # output from causing UnicodeEncodeErrors. (Done here so it should only
    # happen when not being imported by some other program.)
    import sys
    if sys.version_info.major < 3:
        reload(sys)
        sys.setdefaultencoding('utf-8')  # pylint: disable=no-member

    from argparse import ArgumentParser, RawTextHelpFormatter
    parser = ArgumentParser(formatter_class=RawTextHelpFormatter,
            description=__doc__.replace('\r\n', '\n').split('\n--snip--\n')[0])
    parser.add_argument('path', nargs='*')

    args = parser.parse_args()
    todo = []

    paths = args.path or glob.glob("*.webm") + glob.glob("*.mp4")

    for path in paths:
        if not os.path.exists(path):
            print("Skipping nonexistant path: %s" % path)
            continue

        todo.append(path)

        name = os.path.splitext(path)[0]
        name2 = os.path.splitext(name)[0]
        for secondary in (name + '.mpv.edl', name2 + '.mp4', name2 + '.webm'):
            if os.path.exists(secondary) and secondary not in todo:
                todo.append(secondary)

    for src in todo:
        tgt_path = os.path.join(TARGET_DIR, os.path.basename(src))
        if os.path.exists(tgt_path):
            if hash_file(src) == hash_file(tgt_path):
                os.remove(src)
            else:
                print("ERROR: Already exists: %s" % tgt_path)
        else:
            shutil.move(src, TARGET_DIR)

if __name__ == '__main__':
    main()

# vim: set sw=4 sts=4 expandtab :
