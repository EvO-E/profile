#!/usr/bin/env python2
# -*- coding: utf-8 -*-
"""Record-keeping helper for smarter bedtime playback practices.

Dependencies:
- pyalsaaudio (For changing volume for alarms)

NOTE: Requires that mpv's input.conf be amended so `quit` is replaced with
      `quit 20` so premature exits can be detected and the queue aborted.
      (Also, use Ctrl+C to skip the current video without logging)
"""

from __future__ import (absolute_import, division, print_function,
                        with_statement, unicode_literals)

__author__ = "Stephan Sokolow (deitarion/SSokolow)"
__appname__ = "[application name here]"
__version__ = "0.0pre0"
__license__ = "MIT"

import itertools, logging, os, random, subprocess, sys, time
from datetime import datetime, timedelta

PLAY_CMD = ['mpv', '-name', 'bedtime_player', '--osd-level=3']
ALARM_ARGS = ['-loop=inf',
              os.path.join(os.path.dirname(__file__), 'alarm.mp4')]
UNREADY_TIME_LIMIT = '15m'
GRACE_PERIOD = 30  # seconds

log = logging.getLogger(__name__)

this_dir = os.path.abspath(os.path.dirname(__file__))

def play(paths, log_fobj=None, end_time=None):
    """Play a sequence of files and log them unless the user exits"""
    for path in paths:
        if end_time and datetime.utcnow() > end_time:
            break

        path = os.path.abspath(path)

        # Transparently support EDLs for cutting out ads
        if PLAY_CMD[0] == 'mpv':
            # https://github.com/mpv-player/mpv/blob/master/DOCS/edl-mpv.rst
            edl_path = os.path.splitext(path)[0] + '.mpv.edl'
            if os.path.exists(edl_path):
                path = edl_path

        try:
            subprocess.check_call(PLAY_CMD + [path])
        except subprocess.CalledProcessError, err:
            if err.returncode == 20:
                sys.exit(0)  # raise Exception instead
            else:
                continue
        else:
            if log_fobj:
                # playback ended naturally and should be noted
                log_fobj.write('%f\t%s\n' % (time.time(), path))
                log_fobj.flush()
                log.info("Playback logged.")

def walk_args(args):
    """Adapter to recursively resolve directory paths to file paths."""
    for root in args:
        root = os.path.abspath(root)
        if os.path.isfile(root):
            yield root
        elif os.path.isdir(root):
            for path, dirs, files in os.walk(root):
                dirs.sort()
                for fname in sorted(files):
                    yield os.path.join(path, fname)

def parse_duration(duration_str, default_increment='m'):
    increments = {
        's': 'seconds',
        'm': 'minutes',
        'h': 'hours',
        'd': 'days',
        'w': 'weeks'
    }
    duration_str = duration_str.lower()

    if duration_str[-1] in '0123456789':
        duration_str += default_increment

    if duration_str[-1] in increments:
        duration_str, unit = duration_str[:-1], duration_str[-1]
        return timedelta(**{increments[unit]: int(duration_str)})
    else:
        raise ValueError("Not a valid duration string: %s" % duration_str)

def test_duration_str():
    assert parse_duration('15s') == timedelta(seconds=15)
    assert parse_duration('15m') == timedelta(minutes=15)
    assert parse_duration('15h') == timedelta(hours=15)
    assert parse_duration('15d') == timedelta(days=15)
    assert parse_duration('15w') == timedelta(weeks=15)

def prompt(msg, valid='yn'):
    result = ''
    while not result or result not in valid:
        msg = msg.rstrip()
        if msg.endswith('?'):
            prompt_str = "%s [%s]? " % (msg[:-1], valid)
        else:
            prompt_str = "%s [%s]: " % (msg, valid)

        result = raw_input(prompt_str).lower()
    return result

def main():
    """The main entry point, compatible with setuptools entry points."""
    # If we're running on Python 2, take responsibility for preventing
    # output from causing UnicodeEncodeErrors. (Done here so it should only
    # happen when not being imported by some other program.)
    if sys.version_info.major < 3:
        reload(sys)
        sys.setdefaultencoding('utf-8')  # pylint: disable=no-member

    from argparse import ArgumentParser
    parser = ArgumentParser(
            description=__doc__.replace('\r\n', '\n').split('\n--snip--\n')[0])
    parser.add_argument('--version', action='version',
            version="%%(prog)s v%s" % __version__)
    parser.add_argument('-v', '--verbose', action="count",
        default=3, help="Increase the verbosity.")
    parser.add_argument('-q', '--quiet', action="count",
        default=0, help="Decrease the verbosity. Repeat for extra effect")
    parser.add_argument('--recency', action='store_true',
        default=False, help="Sort by least recently played before playing.")
    parser.add_argument('--randomize', action='store',
        default=None, help="When using --recency, shuffle values played within"
        " DAYS of each other.", metavar="DAYS", type=float)
    parser.add_argument('-p', '--print', action='store_true',
        default=False, help="Just print a list of files. Don't play them.")
    parser.add_argument('-n', '--limit', type=int,
                        help="Limit how many files are played")
    parser.add_argument('-t', '--time-limit', default=None,
                        help="Limit play time to this duration, rounded up to"
                        "the nearest complete file")
    parser.add_argument('--no-log', action="store_true", default=False,
                        help="Don't log the playback of the given files.")
    parser.add_argument('files', nargs='+')

    args = parser.parse_args()

    # Set up clean logging to stderr
    log_levels = [logging.CRITICAL, logging.ERROR, logging.WARNING,
                  logging.INFO, logging.DEBUG]
    args.verbose = min(args.verbose - args.quiet, len(log_levels) - 1)
    args.verbose = max(args.verbose, 0)
    logging.basicConfig(level=log_levels[args.verbose],
                        format='%(levelname)s: %(message)s')

    data_path = os.path.join(this_dir, 'bed.records')

    # Prepare the files list
    files = walk_args(args.files)
    if args.recency:
        with open(data_path, 'rU') as fobj:
            # Parse the data store
            data = fobj.read().strip().split('\n')
            data = [x.strip().split(None, 1) for x in data]
            data = {x[1]: x[0] for x in data}

            if args.randomize is not None:
                files = sorted(files, key=lambda x: (
                    int(float(data.get(x, 0)) / (args.randomize * 3600 * 24)),
                    random.random()
                ))
            else:
                files = sorted(files, key=lambda x: data.get(x, 0))

    ready_for_bed = True
    if not args.print:
        ready_for_bed = (prompt("\nAre you ready to sleep?") == 'y')
    if not ready_for_bed:
        # FIXME: Take the lesser of the two time limits
        args.time_limit = UNREADY_TIME_LIMIT

    start_time = datetime.utcnow()
    end_time = None
    if args.limit:
        files = itertools.islice(files, args.limit)
    if args.time_limit:
        end_time = start_time + parse_duration(args.time_limit)

    # TODO: I need some kind of UI that lets me effectively un-mark the ones
    # that played after I fell asleep.

    with open(data_path, 'a') as fobj:
        if args.print:
            print('\n'.join(files))
        else:
            play(files, None if args.no_log else fobj, end_time=end_time)

    # TODO: Factor in idleness calculations when deciding to alarm
    if not ready_for_bed:
        import alsaaudio
        master = alsaaudio.Mixer()  # pylint: disable=no-member

        grace_period = GRACE_PERIOD
        try:
            subprocess.Popen(['festival', '--tts'], stdin=subprocess.PIPE).communicate('Alarm will sound in %d seconds' % grace_period)
        except Exception:
            pass
        while grace_period > 0:
            sys.stdout.write("\rPress Ctrl+C to abort alarm... %s  " %
                             grace_period)
            sys.stdout.flush()
            time.sleep(1)
            grace_period -= 1
        print("")

        orig_vol = master.getvolume()[0]
        master.setvolume(100)
        subprocess.call(PLAY_CMD + ALARM_ARGS)
        master.setvolume(orig_vol)

if __name__ == '__main__':
    main()

# vim: set sw=4 sts=4 expandtab :
