#!/usr/bin/env python2
# -*- coding: utf-8 -*-
"""Record-keeping helper for smarter bedtime playback practices.

Dependencies:
- pyalsaaudio (For changing volume for alarms)

NOTE: Requires that mpv's input.conf be amended so `quit` is replaced with
      `quit 20` so premature exits can be detected and the queue aborted.
      (Also, use Ctrl+C to skip the current video without logging)

TODO: Switch MPV handling to use its JSON-RPC API so there's no need to exit
      and re-launch MPV between files. (That'll fix a lot of warts)
      - https://github.com/jaseg/python-mpv
      - https://mpv.io/manual/master/#json-ipc
      - https://pypi.python.org/pypi/mpv
      - https://pypi.python.org/pypi/python-mpv-zws

TODO: Switch to a Qt+Phonon-based alarm solution and disallow pausing it
"""

from __future__ import (absolute_import, division, print_function,
                        with_statement, unicode_literals)

__author__ = "Stephan Sokolow (deitarion/SSokolow)"
__appname__ = "[application name here]"
__version__ = "0.0pre0"
__license__ = "MIT"

import itertools, logging, os, random, subprocess, sys, time
from contextlib import contextmanager
from datetime import timedelta

from pytimeparse import parse as parse_duration

import xcb, xcb.xproto, xcb.screensaver

PLAY_CMD = ['mpv', '--x11-name', 'bedtime_player', '--osd-level=3',
           '--no-stop-screensaver']
ALARM_ARGS = ['-loop=inf', '--no-video',
              os.path.join(os.path.dirname(__file__), 'alarm.mp4')]
UNREADY_TIME_LIMIT = '10m'
GRACE_PERIOD = 30  # seconds

log = logging.getLogger(__name__)

this_dir = os.path.abspath(os.path.dirname(__file__))

conn = xcb.connect()  # pylint: disable=no-member
setup = conn.get_setup()
ss_conn = conn(xcb.screensaver.key)

def play(path, log_fobj=None):
    """Play a sequence of files and log them unless the user exits"""
    path = os.path.abspath(path)

    # Transparently support EDLs for cutting out ads
    if PLAY_CMD[0] == 'mpv':
        # https://github.com/mpv-player/mpv/blob/master/DOCS/edl-mpv.rst
        edl_path = os.path.splitext(path)[0] + '.mpv.edl'
        if os.path.exists(edl_path):
            path = edl_path

    try:
        subprocess.check_call(PLAY_CMD + [path])
    except subprocess.CalledProcessError, err:
        if err.returncode == 20:
            sys.exit(0)  # raise Exception instead
        else:
            return
    else:
        if log_fobj:
            # playback ended naturally and should be noted
            log_fobj.write('%f\t%s\n' % (time.time(), path))
            log_fobj.flush()
            log.info("Playback logged.")

def walk_args(args):
    """Adapter to recursively resolve directory paths to file paths."""
    for root in args:
        root = os.path.abspath(root)
        if os.path.isfile(root):
            yield root
        elif os.path.isdir(root):
            for path, dirs, files in os.walk(root):
                dirs.sort()
                for fname in sorted(files):
                    yield os.path.join(path, fname)

def prompt(msg, valid='yn'):
    """Display a prompt with fixed choices and validate input"""
    result = ''
    while not result or result not in valid:
        msg = msg.rstrip()
        if msg.endswith('?'):
            prompt_str = "%s [%s]? " % (msg[:-1], valid)
        else:
            prompt_str = "%s [%s]: " % (msg, valid)

        result = raw_input(prompt_str).lower()
    return result

def try_speak(text):
    """A simple abstraction for attempting to speak a string of text."""
    sys.stdout.write("%s\n" % text)
    try:
        subprocess.Popen(['festival', '--tts'],
                         stdin=subprocess.PIPE).communicate(text)
    except OSError:
        pass
    except (AttributeError, ValueError), err:
        sys.stdout.write("Received odd error: %s, %s" % (err.__class__, err))

def ctrlc_countdown(message, duration):
    """Block with a countdown clock for a given number of seconds"""
    while duration > 0:
        sys.stdout.write("\r%s... %s  " % (message, duration))
        sys.stdout.flush()
        time.sleep(1)
        duration -= 1
    print("")

@contextmanager
def maximize_volume():
    """Context manager to temporarily set ALSA volume to maximum"""
    import alsaaudio
    master = alsaaudio.Mixer()  # pylint: disable=no-member

    # TODO: Consider also setting PCM and channel volumes
    orig_vol = master.getvolume()[0]
    master.setvolume(100)
    yield
    master.setvolume(orig_vol)

def load_history(data_path):
    """Load the contents of the playback history"""
    with open(data_path, 'rU') as fobj:
        data = fobj.read()

    # Parse the data store
    data = data.strip().split('\n')
    data = [line.strip().split(None, 1) for line in data]

    return data

def recency_sort(files, records, randomize=None):
    """Sort `files` by recency according to `records`.

    If `randomize` is given, treat it as time window (in days) within which to
    shuffle entries.
    """
    # Load as a filename->newest_timestamp dict
    data = {pair[1]: pair[0] for pair in records}

    if randomize is not None:
        # TODO: Make sure this actually keys filenames based on the timestamp,
        #       truncated to the nearest args.randomize number of days, and a
        #       random value.
        files = sorted(files, key=lambda x: (
            int(float(data.get(x, 0)) / (randomize * 3600 * 24)),
            random.random()
        ))
    else:
        files = sorted(files, key=lambda x: data.get(x, 0))
    return files

def get_idle_secs():
    """Query the number of seconds the system has been idle"""
    try:
        # (Don't use "while True" in case the xcb "NULL when no more"
        #  behaviour occasionally happens)
        while conn.poll_for_event():
            pass
    except IOError:
        # In testing, IOError is raised when no events are available.
        pass

    idle_query = ss_conn.QueryInfo(setup.roots[0].root)
    idle_secs = idle_query.reply().ms_since_user_input / 1000.0
    return idle_secs

def playback_main(args, files, data_path):
    time_limit = parse_duration(args.time_limit or '156w')
    idle_limit = parse_duration(UNREADY_TIME_LIMIT)

    ready_for_bed = {'y': True, 'n': False}.get(args.ready_for_bed)
    if not args.print and ready_for_bed is None:
        ready_for_bed = (prompt("\nAre you ready to sleep?") == 'y')
    if not ready_for_bed:
        # If I try to re-play the same file three times in four hours, my
        # judgement is compromised and I need to brush my teeth first.
        files = list(files)
        history = load_history(data_path)
        if history[-1][1] == history[-2][1] == files[0]:
            if time.time() - float(history[-2][0]) < 3600 * 4:
                try_speak("Your judgement is compromised. "
                          "Go brush your teeth.")
                return

    # Play the files
    playback_started = time.time()
    with open(data_path, 'a') as fobj:
        for path in files:
            if time.time() > playback_started + time_limit:
                break
            if not ready_for_bed and get_idle_secs() > idle_limit:
                break

            play(path, None if args.no_log else fobj)

    if not ready_for_bed and get_idle_secs() > idle_limit:
        try_speak('Alarm will sound in %d seconds' % GRACE_PERIOD)
        ctrlc_countdown("Press Ctrl+C to abort alarm", GRACE_PERIOD)
        with maximize_volume():
            subprocess.call(PLAY_CMD + ALARM_ARGS)

def main():
    """The main entry point, compatible with setuptools entry points."""
    # If we're running on Python 2, take responsibility for preventing
    # output from causing UnicodeEncodeErrors. (Done here so it should only
    # happen when not being imported by some other program.)
    if sys.version_info.major < 3:
        reload(sys)
        sys.setdefaultencoding('utf-8')  # pylint: disable=no-member

    from argparse import ArgumentParser
    parser = ArgumentParser(
            description=__doc__.replace('\r\n', '\n').split('\n--snip--\n')[0])
    parser.add_argument('--version', action='version',
            version="%%(prog)s v%s" % __version__)
    parser.add_argument('-v', '--verbose', action="count",
        default=3, help="Increase the verbosity.")
    parser.add_argument('-q', '--quiet', action="count",
        default=0, help="Decrease the verbosity. Repeat for extra effect")
    parser.add_argument('--recency', action='store_true',
        default=False, help="Sort by least recently played before playing.")
    parser.add_argument('--randomize', action='store',
        default=None, help="When using --recency, shuffle values played within"
        " DAYS of each other.", metavar="DAYS", type=float)
    parser.add_argument('-p', '--print', action='store_true',
        default=False, help="Just print a list of files. Don't play them.")
    parser.add_argument('-n', '--limit', type=int,
                        help="Limit how many files are played")
    parser.add_argument('-t', '--time-limit', default=None,
                        help="Limit play time to this duration, rounded up to "
                        "the nearest complete file")
    parser.add_argument('--no-log', action="store_true", default=False,
                        help="Don't log the playback of the given files.")
    parser.add_argument('--ready-for-bed', choices=['y', 'n'], default=None,
                        help="Pre-specify whether to sound an alarm to prevent"
                             " premature sleeping when jet-lagged so as not to"
                             " interactively prompt.")
    parser.add_argument('files', nargs='+')

    args = parser.parse_args()

    # Set up clean logging to stderr
    log_levels = [logging.CRITICAL, logging.ERROR, logging.WARNING,
                  logging.INFO, logging.DEBUG]
    args.verbose = min(args.verbose - args.quiet, len(log_levels) - 1)
    args.verbose = max(args.verbose, 0)
    logging.basicConfig(level=log_levels[args.verbose],
                        format='%(levelname)s: %(message)s')

    data_path = os.path.join(this_dir, 'bed.records')

    # Prepare the files list
    files = walk_args(args.files)
    if args.recency:
        files = recency_sort(files, load_history(data_path), args.randomize)
    if args.limit:
        files = itertools.islice(files, args.limit)

    # TODO: I need some kind of UI that lets me effectively un-mark the ones
    # that played after I fell asleep.

    # If --print, output and exit, else, go to playback_main()
    if args.print:
        print('\n'.join(files))
    else:
        playback_main(args, files, data_path)


if __name__ == '__main__':
    main()

# vim: set sw=4 sts=4 expandtab :
