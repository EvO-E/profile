#!/usr/bin/env python2
# -*- coding: utf-8 -*-
"""Record-keeping helper for smarter bedtime playback practices.

NOTE: Requires that mpv's input.conf be amended so `quit` is replaced with
      `quit 20` so premature exits can be detected and the queue aborted.
"""

from __future__ import (absolute_import, division, print_function,
                        with_statement, unicode_literals)

__author__ = "Stephan Sokolow (deitarion/SSokolow)"
__appname__ = "[application name here]"
__version__ = "0.0pre0"
__license__ = "MIT"

PLAY_CMD = ['mpv', '-name', 'bedtime_player', '--osd-level=3']

import itertools, logging, os, subprocess, sys, time
log = logging.getLogger(__name__)

this_dir = os.path.abspath(os.path.dirname(__file__))

def play(paths, log_fobj=None):
    """Play a sequence of files and log them unless the user exits"""
    for path in paths:
        path = os.path.abspath(path)

        # Transparently support EDLs for cutting out ads
        if PLAY_CMD[0] == 'mpv':
            # https://github.com/mpv-player/mpv/blob/master/DOCS/edl-mpv.rst
            edl_path = os.path.splitext(path)[0] + '.mpv.edl'
            if os.path.exists(edl_path):
                path = edl_path

        try:
            subprocess.check_call(PLAY_CMD + [path])
        except subprocess.CalledProcessError, err:
            if err.returncode == 20:
                sys.exit(0)  # raise Exception instead
            else:
                continue
        else:
            if log_fobj:
                # playback ended naturally and should be noted
                log_fobj.write('%f\t%s\n' % (time.time(), path))
                log_fobj.flush()

def walk_args(args):
    """Adapter to recursively resolve directory paths to file paths."""
    for root in args:
        root = os.path.abspath(root)
        if os.path.isfile(root):
            yield root
        elif os.path.isdir(root):
            for path, dirs, files in os.walk(root):
                dirs.sort()
                for fname in sorted(files):
                    yield os.path.join(path, fname)

def main():
    """The main entry point, compatible with setuptools entry points."""
    # If we're running on Python 2, take responsibility for preventing
    # output from causing UnicodeEncodeErrors. (Done here so it should only
    # happen when not being imported by some other program.)
    if sys.version_info.major < 3:
        reload(sys)
        sys.setdefaultencoding('utf-8')  # pylint: disable=no-member

    from argparse import ArgumentParser
    parser = ArgumentParser(
            description=__doc__.replace('\r\n', '\n').split('\n--snip--\n')[0])
    parser.add_argument('--version', action='version',
            version="%%(prog)s v%s" % __version__)
    parser.add_argument('-v', '--verbose', action="count",
        default=2, help="Increase the verbosity. Use twice for extra effect")
    parser.add_argument('-q', '--quiet', action="count",
        default=0, help="Decrease the verbosity. Use twice for extra effect")
    parser.add_argument('--recency', action='store_true',
        default=False, help="Sort by least recently played before playing.")
    parser.add_argument('-p', '--print', action='store_true',
        default=False, help="Just print a list of files. Don't play them.")
    parser.add_argument('-n', '--limit', type=int,
                        help="Limit how many files are played")
    parser.add_argument('files', nargs='+')

    args = parser.parse_args()

    # Set up clean logging to stderr
    log_levels = [logging.CRITICAL, logging.ERROR, logging.WARNING,
                  logging.INFO, logging.DEBUG]
    args.verbose = min(args.verbose - args.quiet, len(log_levels) - 1)
    args.verbose = max(args.verbose, 0)
    logging.basicConfig(level=log_levels[args.verbose],
                        format='%(levelname)s: %(message)s')

    data_path = os.path.join(this_dir, 'bed.records')

    # Prepare the files list
    files = walk_args(args.files)
    if args.recency:
        with open(data_path, 'rU') as fobj:
            # Parse the data store
            data = fobj.read().strip().split('\n')
            data = [x.strip().split(None, 1) for x in data]
            data = {x[1]: x[0] for x in data}

            files = sorted(files, key=lambda x: data.get(x, 0))

    if args.limit:
        files = itertools.islice(files, args.limit)

    # TODO: Add a time-limit option which only works when playing.

    # TODO: I need some kind of UI that lets me effectively un-mark the ones
    # that played after I fell asleep.

    with open(data_path, 'a') as fobj:
        if args.print:
            print('\n'.join(files))
        else:
            play(files, fobj)

if __name__ == '__main__':
    main()

# vim: set sw=4 sts=4 expandtab :
