#!/usr/bin/env python
# -*- coding: utf-8 -*-
"""Convenience tool for populating the overlay with ebuilds generated from
from the existing portage tree."""

__appname__ = "[application name here]"
__author__  = "Stephan Sokolow (deitarion/SSokolow)"
__version__ = "0.0pre0"
__license__ = "GNU GPL 3.0 or later"

import hashlib, logging, os, shutil, sys
from subprocess import Popen, PIPE, call

# Set up INFO logging
logging.basicConfig(level=logging.INFO, format='%(levelname)s: %(message)s')

PORTDIR = "/usr/portage"
PORTDIR_LOCAL = "/usr/local/portage"

def toOverlay(srcAtom, targetName=None):
    # Resolve the input to an ebuild path using equery
    pkg_path = Popen(('equery','which',srcAtom), stdout=PIPE).stdout.read().strip()
    pkg_dir = os.path.dirname(pkg_path)

    if not pkg_path:
        raise ValueError("Unable to resolve atom using equery: %s" % srcAtom)

    try:
        raw_input("Your atom resolved to %s. If that's not what you meant, Ctrl+C now; Otherwise, press Enter." % pkg_path)
    except KeyboardInterrupt:
        print   # Provide the \n we postponed so the resulting prompt is properly aligned.
        raise

    if not pkg_path.startswith(PORTDIR + os.sep):
        print "TODO: Fix this so it doesn't use hardcoded PORTDIR and PORTDIR_LOCAL"

    pkg_suffix = os.sep.join(pkg_path.rsplit(os.sep)[-3:])

    if targetName:
        pkg_suffix = os.path.split(pkg_suffix)[0] + os.sep + targetName.rstrip('.ebuild') + '.ebuild'
    overlay_path = os.path.join(PORTDIR_LOCAL, pkg_suffix)

    # Copy the ebuild and files directory into place if they aren't in the overlay.
    if not os.path.exists(overlay_path):
        overlay_dir = os.path.dirname(overlay_path)

        if not os.path.exists(overlay_dir):
            os.makedirs(overlay_dir)
        if not os.path.exists(overlay_path):
            shutil.copy(pkg_path, overlay_path)

        pkg_files_dir = os.path.join(pkg_dir, 'files')
        overlay_files_dir = os.path.join(overlay_dir, 'files')

        if os.path.isdir(pkg_files_dir):
            if not os.path.isdir(overlay_files_dir):
                os.makedirs(overlay_files_dir)

            for fname in os.listdir(pkg_files_dir):
                src_name    = os.path.join(pkg_files_dir,     fname)
                target_name = os.path.join(overlay_files_dir, fname)
                if not os.path.exists(target_name):
                    if os.path.isdir(src_name):
                        shutil.copytree(src_name, target_name)
                    else:
                        shutil.copy(src_name, target_name)

    #FIXME: Use a temp file and do this before copying so we can abort the whole
    # process if the ebuild wasn't edited.

    # Call the user's preferred editor on the ebuild
    old_hash = hashlib.md5(open(overlay_path, 'rb').read())
    call((os.environ['EDITOR'], overlay_path))
    new_hash = hashlib.md5(open(overlay_path, 'rb').read())

    # If the file was changed, recalculate the digest
    if old_hash != new_hash:
        call(('ebuild', overlay_path, 'digest'))

if __name__ == '__main__':
    from optparse import OptionParser
    parser = OptionParser(description=__doc__,
            usage="%prog [options] <source atom> [destination atom]",
            version="%%prog v%s" % __version__)
    #parser.add_option('-v', '--verbose', action="store_true", dest="verbose",
    #    default=False, help="Increase verbosity")

    opts, args = parser.parse_args()
    if not len(args) in [1,2]:
        print "Invalid arguments. See --help"
        sys.exit(2)

    if os.geteuid() != 0:
        print "Calling sudo to acquire root permissions..."
        os.execvp('sudo', ['sudo'] + sys.argv)

    try:
        toOverlay(*args)
    except KeyboardInterrupt:
        sys.exit(0)
    except Exception, err:
        print "ERROR: %s" % err
        sys.exit(1)
